name: cezbek-engine-ci

on:
  push:
    branches:
      - development
      - master
  pull_request:
    branches:
      - development
      - master

jobs:
  test:
    name : Quick Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Golang w/ cache
        uses: magnetikonline/action-golang-cache@v3
        with:
          go-version: ~1.17

      - name: Static Security Test
        uses: securego/gosec@master
        with:
          args: -exclude-dir=mock -exclude-dir=internal/docs ./...

      - name: Unit Test
        run: go test -coverprofile=coverage.out ./internal/...

      - name: Code Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Test Build Job Service
        run: go mod tidy -compat=1.17 && go build -v cmd/job/cron.go

      - name: Test Build API Service
        run: go mod tidy -compat=1.17 && go build -v cmd/api/router.go
  delivery:
    name: Package Service
    needs: test
    runs-on: ubuntu-latest
    env:
      PUSH_PACKAGES: ${{ github.event_name == 'push' && github.ref == 'refs/heads/development' }}

    steps:
      - name: Checkout
        if: ${{ env.PUSH_PACKAGES }}
        uses: actions/checkout@v2

      - name: Set Auth Amazon AWS
        if: ${{ env.PUSH_PACKAGES }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-southeast-3

      - name: Auth to Amazon ECR
        if: ${{ env.PUSH_PACKAGES }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Package Job Service to Amazon ECR
        if: ${{ env.PUSH_PACKAGES }}
        id: build-image-job
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_CEZBEK_JOB }}
          IMAGE_TAG: ${{ github.sha }}
          CONSUL_HOST: ${{ secrets.CONSUL_HOST }}
          CONSUL_PORT: ${{ secrets.CONSUL_PORT }}
        run: |
          docker build -f deployment/Dockerfile.job -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  --build-arg CONSUL_HOST=$CONSUL_HOST --build-arg CONSUL_PORT=$CONSUL_PORT --build-arg APP_CEZBEK_JOB=cezbek-job-dev .
          echo "Pushing cezbek job image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 

      - name: Package API Service to Amazon ECR
        if: ${{ env.PUSH_PACKAGES }}
        id: build-image-api
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_CEZBEK_API }}
          IMAGE_TAG: ${{ github.sha }}
          CONSUL_HOST: ${{ secrets.CONSUL_HOST }}
          CONSUL_PORT: ${{ secrets.CONSUL_PORT }}
        run: |
          docker build -f deployment/Dockerfile.api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  --build-arg CONSUL_HOST=$CONSUL_HOST --build-arg CONSUL_PORT=$CONSUL_PORT --build-arg APP_CEZBEK_JOB=cezbek-api-dev .
          echo "Pushing cezbek api image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 
    
