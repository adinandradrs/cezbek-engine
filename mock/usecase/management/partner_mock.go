// Code generated by MockGen. DO NOT EDIT.
// Source: partner.go

// Package mock_management is a generated GoMock package.
package management

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPartnerManager is a mock of PartnerManager interface.
type MockPartnerManager struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerManagerMockRecorder
}

// MockPartnerManagerMockRecorder is the mock recorder for MockPartnerManager.
type MockPartnerManagerMockRecorder struct {
	mock *MockPartnerManager
}

// NewMockPartnerManager creates a new mock instance.
func NewMockPartnerManager(ctrl *gomock.Controller) *MockPartnerManager {
	mock := &MockPartnerManager{ctrl: ctrl}
	mock.recorder = &MockPartnerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerManager) EXPECT() *MockPartnerManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPartnerManager) Add(inp *model.AddPartnerRequest) (*model.TransactionResponse, *model.BusinessError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", inp)
	ret0, _ := ret[0].(*model.TransactionResponse)
	ret1, _ := ret[1].(*model.BusinessError)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPartnerManagerMockRecorder) Add(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPartnerManager)(nil).Add), inp)
}
