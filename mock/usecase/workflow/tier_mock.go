// Code generated by MockGen. DO NOT EDIT.
// Source: tier.go

// Package mock_workflow is a generated GoMock package.
package workflow

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTierProvider is a mock of TierProvider interface.
type MockTierProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTierProviderMockRecorder
}

// MockTierProviderMockRecorder is the mock recorder for MockTierProvider.
type MockTierProviderMockRecorder struct {
	mock *MockTierProvider
}

// NewMockTierProvider creates a new mock instance.
func NewMockTierProvider(ctrl *gomock.Controller) *MockTierProvider {
	mock := &MockTierProvider{ctrl: ctrl}
	mock.recorder = &MockTierProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierProvider) EXPECT() *MockTierProviderMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTierProvider) Save(inp *model.TierRequest) (*model.WfRewardTierProjection, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", inp)
	ret0, _ := ret[0].(*model.WfRewardTierProjection)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockTierProviderMockRecorder) Save(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTierProvider)(nil).Save), inp)
}
