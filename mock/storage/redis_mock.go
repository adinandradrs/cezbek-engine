// Code generated by MockGen. DO NOT EDIT.
// Source: redis.go

// Package mock_storage is a generated GoMock package.
package storage

import (
	reflect "reflect"
	time "time"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCacher is a mock of Cacher interface.
type MockCacher struct {
	ctrl     *gomock.Controller
	recorder *MockCacherMockRecorder
}

// MockCacherMockRecorder is the mock recorder for MockCacher.
type MockCacherMockRecorder struct {
	mock *MockCacher
}

// NewMockCacher creates a new mock instance.
func NewMockCacher(ctrl *gomock.Controller) *MockCacher {
	mock := &MockCacher{ctrl: ctrl}
	mock.recorder = &MockCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacher) EXPECT() *MockCacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCacher) Delete(k, p string) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", k, p)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacherMockRecorder) Delete(k, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCacher)(nil).Delete), k, p)
}

// Get mocks base method.
func (m *MockCacher) Get(k, p string) (string, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", k, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacherMockRecorder) Get(k, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacher)(nil).Get), k, p)
}

// Hget mocks base method.
func (m *MockCacher) Hget(k, p string) (string, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hget", k, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Hget indicates an expected call of Hget.
func (mr *MockCacherMockRecorder) Hget(k, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hget", reflect.TypeOf((*MockCacher)(nil).Hget), k, p)
}

// Hset mocks base method.
func (m *MockCacher) Hset(k, p string, v interface{}) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hset", k, p, v)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Hset indicates an expected call of Hset.
func (mr *MockCacherMockRecorder) Hset(k, p, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hset", reflect.TypeOf((*MockCacher)(nil).Hset), k, p, v)
}

// Set mocks base method.
func (m *MockCacher) Set(k, p string, v interface{}, d time.Duration) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", k, p, v, d)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacherMockRecorder) Set(k, p, v, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacher)(nil).Set), k, p, v, d)
}

// Ttl mocks base method.
func (m *MockCacher) Ttl(k, p string) (time.Duration, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ttl", k, p)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Ttl indicates an expected call of Ttl.
func (mr *MockCacherMockRecorder) Ttl(k, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ttl", reflect.TypeOf((*MockCacher)(nil).Ttl), k, p)
}
