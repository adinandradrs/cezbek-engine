// Code generated by MockGen. DO NOT EDIT.
// Source: workflow.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockWorkflowPersister is a mock of WorkflowPersister interface.
type MockWorkflowPersister struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowPersisterMockRecorder
}

// MockWorkflowPersisterMockRecorder is the mock recorder for MockWorkflowPersister.
type MockWorkflowPersisterMockRecorder struct {
	mock *MockWorkflowPersister
}

// NewMockWorkflowPersister creates a new mock instance.
func NewMockWorkflowPersister(ctrl *gomock.Controller) *MockWorkflowPersister {
	mock := &MockWorkflowPersister{ctrl: ctrl}
	mock.recorder = &MockWorkflowPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowPersister) EXPECT() *MockWorkflowPersisterMockRecorder {
	return m.recorder
}

// FindCashbackByTransaction mocks base method.
func (m *MockWorkflowPersister) FindCashbackByTransaction(qty int, trx decimal.Decimal) (*decimal.Decimal, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCashbackByTransaction", qty, trx)
	ret0, _ := ret[0].(*decimal.Decimal)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// FindCashbackByTransaction indicates an expected call of FindCashbackByTransaction.
func (mr *MockWorkflowPersisterMockRecorder) FindCashbackByTransaction(qty, trx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCashbackByTransaction", reflect.TypeOf((*MockWorkflowPersister)(nil).FindCashbackByTransaction), qty, trx)
}

// FindRewardTiers mocks base method.
func (m *MockWorkflowPersister) FindRewardTiers() ([]model.WfRewardTierProjection, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRewardTiers")
	ret0, _ := ret[0].([]model.WfRewardTierProjection)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// FindRewardTiers indicates an expected call of FindRewardTiers.
func (mr *MockWorkflowPersisterMockRecorder) FindRewardTiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRewardTiers", reflect.TypeOf((*MockWorkflowPersister)(nil).FindRewardTiers))
}
