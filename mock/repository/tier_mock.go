// Code generated by MockGen. DO NOT EDIT.
// Source: tier.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	reflect "reflect"
	time "time"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTierPersister is a mock of TierPersister interface.
type MockTierPersister struct {
	ctrl     *gomock.Controller
	recorder *MockTierPersisterMockRecorder
}

// MockTierPersisterMockRecorder is the mock recorder for MockTierPersister.
type MockTierPersisterMockRecorder struct {
	mock *MockTierPersister
}

// NewMockTierPersister creates a new mock instance.
func NewMockTierPersister(ctrl *gomock.Controller) *MockTierPersister {
	mock := &MockTierPersister{ctrl: ctrl}
	mock.recorder = &MockTierPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTierPersister) EXPECT() *MockTierPersisterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTierPersister) Add(tier model.Tier) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", tier)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTierPersisterMockRecorder) Add(tier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTierPersister)(nil).Add), tier)
}

// CountExpire mocks base method.
func (m *MockTierPersister) CountExpire() (*int, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountExpire")
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// CountExpire indicates an expected call of CountExpire.
func (mr *MockTierPersisterMockRecorder) CountExpire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountExpire", reflect.TypeOf((*MockTierPersister)(nil).CountExpire))
}

// Expire mocks base method.
func (m *MockTierPersister) Expire(expired time.Time) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", expired)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockTierPersisterMockRecorder) Expire(expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockTierPersister)(nil).Expire), expired)
}

// FindByPartnerMsisdn mocks base method.
func (m *MockTierPersister) FindByPartnerMsisdn(pid int64, msisdn string) (*model.Tier, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPartnerMsisdn", pid, msisdn)
	ret0, _ := ret[0].(*model.Tier)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// FindByPartnerMsisdn indicates an expected call of FindByPartnerMsisdn.
func (mr *MockTierPersisterMockRecorder) FindByPartnerMsisdn(pid, msisdn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPartnerMsisdn", reflect.TypeOf((*MockTierPersister)(nil).FindByPartnerMsisdn), pid, msisdn)
}

// Update mocks base method.
func (m *MockTierPersister) Update(tier model.Tier) *model.TechnicalError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tier)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTierPersisterMockRecorder) Update(tier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTierPersister)(nil).Update), tier)
}
