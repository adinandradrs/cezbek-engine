// Code generated by MockGen. DO NOT EDIT.
// Source: sqs.go

// Package mock_adaptor is a generated GoMock package.
package adaptor

import (
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go/service/sqs"
	gomock "github.com/golang/mock/gomock"
)

// MockSQSAdapter is a mock of SQSAdapter interface.
type MockSQSAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSQSAdapterMockRecorder
}

// MockSQSAdapterMockRecorder is the mock recorder for MockSQSAdapter.
type MockSQSAdapterMockRecorder struct {
	mock *MockSQSAdapter
}

// NewMockSQSAdapter creates a new mock instance.
func NewMockSQSAdapter(ctrl *gomock.Controller) *MockSQSAdapter {
	mock := &MockSQSAdapter{ctrl: ctrl}
	mock.recorder = &MockSQSAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSQSAdapter) EXPECT() *MockSQSAdapterMockRecorder {
	return m.recorder
}

// DeleteMessages mocks base method.
func (m *MockSQSAdapter) DeleteMessages(q, h string) *sqs.DeleteMessageOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessages", q, h)
	ret0, _ := ret[0].(*sqs.DeleteMessageOutput)
	return ret0
}

// DeleteMessages indicates an expected call of DeleteMessages.
func (mr *MockSQSAdapterMockRecorder) DeleteMessages(q, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessages", reflect.TypeOf((*MockSQSAdapter)(nil).DeleteMessages), q, h)
}

// GetMessages mocks base method.
func (m *MockSQSAdapter) GetMessages(q string) *sqs.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", q)
	ret0, _ := ret[0].(*sqs.Message)
	return ret0
}

// GetMessages indicates an expected call of GetMessages.
func (mr *MockSQSAdapterMockRecorder) GetMessages(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*MockSQSAdapter)(nil).GetMessages), q)
}

// SendMessage mocks base method.
func (m *MockSQSAdapter) SendMessage(q, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", q, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSQSAdapterMockRecorder) SendMessage(q, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSQSAdapter)(nil).SendMessage), q, msg)
}
