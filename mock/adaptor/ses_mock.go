// Code generated by MockGen. DO NOT EDIT.
// Source: ses.go

// Package mock_adaptor is a generated GoMock package.
package adaptor

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSESAdapter is a mock of SESAdapter interface.
type MockSESAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSESAdapterMockRecorder
}

// MockSESAdapterMockRecorder is the mock recorder for MockSESAdapter.
type MockSESAdapterMockRecorder struct {
	mock *MockSESAdapter
}

// NewMockSESAdapter creates a new mock instance.
func NewMockSESAdapter(ctrl *gomock.Controller) *MockSESAdapter {
	mock := &MockSESAdapter{ctrl: ctrl}
	mock.recorder = &MockSESAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSESAdapter) EXPECT() *MockSESAdapterMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m_2 *MockSESAdapter) SendEmail(m model.SendEmailRequest) (*model.TransactionResponse, *model.TechnicalError) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendEmail", m)
	ret0, _ := ret[0].(*model.TransactionResponse)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockSESAdapterMockRecorder) SendEmail(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockSESAdapter)(nil).SendEmail), m)
}
