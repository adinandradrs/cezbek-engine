// Code generated by MockGen. DO NOT EDIT.
// Source: ciam.go

// Package mock_adaptor is a generated GoMock package.
package adaptor

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCiamWatcher is a mock of CiamWatcher interface.
type MockCiamWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockCiamWatcherMockRecorder
}

// MockCiamWatcherMockRecorder is the mock recorder for MockCiamWatcher.
type MockCiamWatcherMockRecorder struct {
	mock *MockCiamWatcher
}

// NewMockCiamWatcher creates a new mock instance.
func NewMockCiamWatcher(ctrl *gomock.Controller) *MockCiamWatcher {
	mock := &MockCiamWatcher{ctrl: ctrl}
	mock.recorder = &MockCiamWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCiamWatcher) EXPECT() *MockCiamWatcherMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m_2 *MockCiamWatcher) Authenticate(m model.CiamAuthenticationRequest) (*model.CiamAuthenticationResponse, *model.TechnicalError) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Authenticate", m)
	ret0, _ := ret[0].(*model.CiamAuthenticationResponse)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockCiamWatcherMockRecorder) Authenticate(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockCiamWatcher)(nil).Authenticate), m)
}

// JwtInfo mocks base method.
func (m *MockCiamWatcher) JwtInfo(t string) (map[string]interface{}, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JwtInfo", t)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// JwtInfo indicates an expected call of JwtInfo.
func (mr *MockCiamWatcherMockRecorder) JwtInfo(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JwtInfo", reflect.TypeOf((*MockCiamWatcher)(nil).JwtInfo), t)
}

// OnboardPartner mocks base method.
func (m_2 *MockCiamWatcher) OnboardPartner(m model.CiamOnboardPartnerRequest) (*model.CiamUserResponse, *model.TechnicalError) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "OnboardPartner", m)
	ret0, _ := ret[0].(*model.CiamUserResponse)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// OnboardPartner indicates an expected call of OnboardPartner.
func (mr *MockCiamWatcherMockRecorder) OnboardPartner(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnboardPartner", reflect.TypeOf((*MockCiamWatcher)(nil).OnboardPartner), m)
}
