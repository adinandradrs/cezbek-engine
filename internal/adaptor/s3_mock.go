// Code generated by MockGen. DO NOT EDIT.
// Source: s3.go

// Package mock_adaptor is a generated GoMock package.
package adaptor

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
)

// MockS3Watcher is a mock of S3Watcher interface.
type MockS3Watcher struct {
	ctrl     *gomock.Controller
	recorder *MockS3WatcherMockRecorder
}

// MockS3WatcherMockRecorder is the mock recorder for MockS3Watcher.
type MockS3WatcherMockRecorder struct {
	mock *MockS3Watcher
}

// NewMockS3Watcher creates a new mock instance.
func NewMockS3Watcher(ctrl *gomock.Controller) *MockS3Watcher {
	mock := &MockS3Watcher{ctrl: ctrl}
	mock.recorder = &MockS3WatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Watcher) EXPECT() *MockS3WatcherMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockS3Watcher) Upload(req *model.S3UploadRequest) (*s3manager.UploadOutput, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", req)
	ret0, _ := ret[0].(*s3manager.UploadOutput)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockS3WatcherMockRecorder) Upload(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockS3Watcher)(nil).Upload), req)
}
