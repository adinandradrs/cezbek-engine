// Code generated by MockGen. DO NOT EDIT.
// Source: partner.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	model "github.com/adinandradrs/cezbek-engine/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPartnerPersister is a mock of PartnerPersister interface.
type MockPartnerPersister struct {
	ctrl     *gomock.Controller
	recorder *MockPartnerPersisterMockRecorder
}

// MockPartnerPersisterMockRecorder is the mock recorder for MockPartnerPersister.
type MockPartnerPersisterMockRecorder struct {
	mock *MockPartnerPersister
}

// NewMockPartnerPersister creates a new mock instance.
func NewMockPartnerPersister(ctrl *gomock.Controller) *MockPartnerPersister {
	mock := &MockPartnerPersister{ctrl: ctrl}
	mock.recorder = &MockPartnerPersisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartnerPersister) EXPECT() *MockPartnerPersisterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m_2 *MockPartnerPersister) Add(m model.Partner) *model.TechnicalError {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Add", m)
	ret0, _ := ret[0].(*model.TechnicalError)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPartnerPersisterMockRecorder) Add(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPartnerPersister)(nil).Add), m)
}

// CountByIdentifier mocks base method.
func (m_2 *MockPartnerPersister) CountByIdentifier(m model.Partner) (*int, *model.TechnicalError) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CountByIdentifier", m)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// CountByIdentifier indicates an expected call of CountByIdentifier.
func (mr *MockPartnerPersisterMockRecorder) CountByIdentifier(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByIdentifier", reflect.TypeOf((*MockPartnerPersister)(nil).CountByIdentifier), m)
}

// FindActiveByCodeAndApiKey mocks base method.
func (m *MockPartnerPersister) FindActiveByCodeAndApiKey(code, key string) (*model.Partner, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveByCodeAndApiKey", code, key)
	ret0, _ := ret[0].(*model.Partner)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// FindActiveByCodeAndApiKey indicates an expected call of FindActiveByCodeAndApiKey.
func (mr *MockPartnerPersisterMockRecorder) FindActiveByCodeAndApiKey(code, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveByCodeAndApiKey", reflect.TypeOf((*MockPartnerPersister)(nil).FindActiveByCodeAndApiKey), code, key)
}

// FindActiveByEmail mocks base method.
func (m *MockPartnerPersister) FindActiveByEmail(email string) (*model.Partner, *model.TechnicalError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActiveByEmail", email)
	ret0, _ := ret[0].(*model.Partner)
	ret1, _ := ret[1].(*model.TechnicalError)
	return ret0, ret1
}

// FindActiveByEmail indicates an expected call of FindActiveByEmail.
func (mr *MockPartnerPersisterMockRecorder) FindActiveByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActiveByEmail", reflect.TypeOf((*MockPartnerPersister)(nil).FindActiveByEmail), email)
}
